@model MyCoreWebApp.Models.ServiceRequestViewModel

@{
    ViewData["Title"] = "Create2";
}


<div class="jumbotron">
    <h2>Create2 service page</h2>
   <br />
    <p class="lead">Clean up this UI using bootstrap </p><br />
    0. Remove Custom CSS for now to help with making sure the bootstrap controls appears normal by default settings. <br />
    1. Add Page title and relevant info like a description in the jumbotron. <br />
    2. replace the HTML.Textbox to use Form Groups like done on the Service Description section below. <br />
    3. Get rid of the HTML table  <br />
    4. Update Navbar to point to Create2 instead of create <br />
    5. Remove the links in the Contact Page, Dont worry about the popup, just get the UI to follow the same look and feel as the other pages with a jumbotron and a paragraph...
    <hr />
    Additional Example Go to <b><a href="https://www.w3schools.com/bootstrap/bootstrap_forms.asp" target="_blank">W3 Schools Here</a></b> and search for <label class="label-warning">"Bootstrap Horizontal Form"</label> to see how clean inputs rendor. <br />
    <a href="https://www.w3schools.com/bootstrap/tryit.asp?filename=trybs_form_horizontal&stacked=h" target="_blank">Example Demo</a>
</div>
@*// demo section below*@
<h3><b>Please fill out the form for your service request</b></h3>
@using (Html.BeginForm("Create2", "ServiceRequest", FormMethod.Post))
{
    <table>
        <tr>
            <td>Enter ID: </td>
            <td>@Html.TextBox("RequestTypeId")</td>
        </tr>
        <tr>
            <td>Enter Name: </td>
            <td>@Html.TextBox("RequestName")</td>
        </tr>
        <tr>
            @*<td colspan="2"><input type="submit" value="Submit"></td>*@
        </tr>
    </table>
    <div class="form-group">
        <label asp-for="ServiceDescription" class="control-label"></label>
        <input asp-for="ServiceDescription" class="form-control" />
        <span asp-validation-for="ServiceDescription" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Email" class="control-label"></label>
        <input asp-for="Email" class="form-control" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>


    @Html.CheckBox("CustomerConsent", true) <br />

    <div class="form-group">
        @Html.LabelFor(m => m.RequestTypeDdl)
        @Html.DropDownListFor(m => m.RequestType, // 1. Store selected value in Model.RequestType;
                                            // when page is rendered after postback,
                                            // take selected value from Model.State.

               // 2. Take list of values from Model.States
               Model.RequestTypeDdl,

               // 3. Text for the first 'default' option
               "- Please select an option -",

               //4. A class name to assign to <select> tag
               new { @class = "form-control" })
    </div>

    <br />
    <input class="btn btn-default" type="submit" value="submit">
}

    <hr />
<h1 class="text-success"> Results, Does everything look correct?</h1>
<h4 style="color:black">0
    @Html.DisplayNameFor(m => m.Email)<br />
    @Html.DisplayFor(m => m.Email)
    @Html.DisplayNameFor(m => m.ServiceDescription)<br />
    @Html.DisplayFor(m => m.ServiceDescription)
    @Html.DisplayNameFor(m => m.Id)<br />
    @Html.DisplayFor(m => m.Id)
    @Html.DisplayNameFor(m => m.Name)<br />
    @Html.DisplayFor(m => m.Name)
    @Html.DisplayNameFor(m => m.CheckBox)<br />
    @Html.DisplayFor(m => m.CheckBox) <br />
    @Html.DisplayNameFor(m => m.RequestType) (selected)<br />
    @Html.DisplayFor(m => m.RequestType)

</h4>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
